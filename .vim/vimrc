""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
set modelines=0                                           " disable modeline support
set nomodeline                                            " disable modeline support
set autoindent
set autoread                                              " auto read files modified outside of vim
set autowrite                                             " auto write when switching buffers
set background=dark
set backspace=indent,eol,start	                          " more powerful backspacing
set backupdir=~/.vim/tmp
set clipboard=unnamed
set colorcolumn=+1
set completeopt-=preview                                  " turn off preview window for ycm
set cursorcolumn                                          " highlight the current cursor column
set cursorline                                            " highlight the current cursor line
set directory=~/.vim/tmp
set expandtab
set expandtab                                             " make tabs into spaces (set by tabstop)
set fillchars=stl:-,stlnc:-,vert:│
set foldmethod=indent                                     " detect folds based on inentation
set foldlevel=99                                          " set a high fold level, should open all unless files have more than 99 levels of nesting
set history=50                                            " keep 50 lines of command line history
set hlsearch
set ignorecase smartcase                                  " Ignore case for search patterns
set incsearch                                             " do incremental searching
set laststatus=2                                          " powerline
set list
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<   " whitespace placeholders
set matchtime=5                                           " bracket blinking.
set mouse=a                                               " use a mouse if available
set noswapfile                                            " turn off swap files
set number                                                " show line numbers
set path+=**                                              " recursively search directories
set relativenumber                                        " show relative line numbers
set rtp+=/usr/local/bin/fzf
set ruler                                                 " show the cursor position all the time
set shiftwidth=2                                          " set the default shift width for indents
set showcmd                                               " display an incomplete command in the lower right corner of the vim window
set showcmd                                               " display incomplete commands
set showmatch                                             " show matching brackets.
set smartcase                                             " Respect cases in search when mixed case detected
set smartindent                                           " Changes indent based on file extension
set smarttab                                              " smarter tab levels
set softtabstop=2                                         " tab = 2 spaces
set splitbelow                                            " default horizontal split below
set splitright                                            " default vertical split right
set synmaxcol=250                                         " stop syntax higlighting at 250 columns
set t_co=256                                              " force vim to use 256 colors
set tabstop=2                                             " set the default tabstop
set tags=./tags,tags;$HOME                                " Vim to search for Ctags file in current file's directory, moving up the directory structure until found/home is hit
set termguicolors                                         " enable true colors support (plug ayu-vim)
set textwidth=80                                          " make it obvious where 80 chars is
set undodir=~/.vim/undodir                                " directory to store undo files
set undofile                                              " name to use for undo files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip                  " ignore these in wildcard searches
set wildmenu                                              " enable wilcard for ex commands
set wildmode=longest:list,full
set wrapmargin=0
set nowrap


:silent !stty -ixon                                        " allow us to use ctrl-s and ctrl-q as keybinds
:silent call system('mkdir -p ' . &undodir)                " make the undo directory if it doesn't exist


filetype on                                               " enable filetype detection
set omnifunc=syntaxcomplete#Complete                      " enable 'intelisense'
filetype indent on                                        " enable filetype-specific indenting
filetype plugin on                                        " enable filetype-specific plugins

syntax on
syntax enable
""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""" Autocommands """"""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd vimleave * silent !stty ixon                      " restore default behaviour when leaving vim.
augroup javascript_folding
    au!
    au filetype javascript setlocal foldmethod=syntax
augroup end

function! ColoHighlights() abort
   highlight vertsplit term=none cterm=none ctermfg=none ctermbg=none guibg=bg guifg=grey
   highlight statusline term=none cterm=none gui=none guibg=bg guifg=grey
   highlight statuslinenc term=none cterm=none gui=none guibg=bg guifg=grey
   highlight pmenu guifg=#cb4a16 guibg=#00262e
   highlight PmenuSbar guifg=red guibg=#000000
   highlight PmenuThumb guibg=#333333
   highlight Comment cterm=italic gui=italic
endfunction

augroup SetColors
  autocmd!
  autocmd ColorScheme * call ColoHighlights()
augroup END
colorscheme solarized8

augroup js_snippets
  autocmd!
  autocmd filetype javascript UltiSnipsAddFiletypes javascript-es6-react 
  autocmd filetype javascript UltiSnipsAddFiletypes javascript-jasmine-arrow 
augroup end

" open quickfix item in vert split
autocmd! filetype qf nnoremap <buffer> <leader><enter> <c-w><enter><c-w>l:cclo<cr>

"Write on entering and leaving buffers
au FocusGained,BufEnter * :silent! !
au FocusLost,WinLeave * :silent! w

" Automatically equalize splits when Vim is resized
autocmd VimResized * wincmd =

" jsx comments
" autocmd FileType jsx setlocal commentstring={/*\ %s\ */}
" autocmd FileType javascript.jsx setlocal commentstring={/*\ %s\ */}
""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""" Mappings """""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"""""""""""""""""normal mode""""""""""""""""""
" space as mod key
let mapleader = " "

" turn off arrow keys
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Up>   <Nop>
nnoremap <Down> <Nop>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" open nertree to the current open file
nnoremap <silent> <Leader>c :NERDTreeFind<CR>

" kill all bad whitespace in the file
map <C-e> :%s/\s\+$//e <CR>

" Quit file - doesn't work, check with Gabe Harms (copied from his .vimrc)
map <C-q> :q <CR>

" Save file - doesn't work, check with Gabe Harms (copied from his .vimrc)
map <C-s> :w<CR> :echo "Saved" <CR>

" hmmm reconsider these, faster split navigation is probably more important
map <C-w>h <S-^>
map <C-w>l <S-$>

" copy current relative file path
map <C-n> :let @+ = expand("%") <CR>

" LEADER
" toggle nerdtree
" map <leader>n :NERDTreeToggle <CR>

" Fuzzy finder
noremap <leader>f :Files <CR>

" set working directory to current file path
nnoremap <leader>C :lcd %:p:h<CR>:pwd<CR>

" write to buffer (save)
nmap <leader>s :w<CR>

" highlight search
map <leader>l :set hlsearch!<CR>

" open vimrc in a new tab!
map <leader>v :tabe ~/.vimrc<CR>

" open root .env in a new tab
map <leader>e :tabe ~/.env<CR>

" toggle text wrapping
map <leader>w :set wrap!<CR>
" :set linebreak<CR>

map <Leader>l :Lines<CR>
map <Leader>b :Buffer<CR>
map <Leader>m :Marks<CR>
map <Leader>y :BTags<CR>
map <Leader>Y :Tags<CR>
map <Leader>; :History:<CR>
map <Leader>/ :History/<CR>
map <Leader>r :registers<CR>

" autoindent file
map <Leader>i mzgg=G`z<CR>

map <Leader>vs :source ~/.vimrc<CR>

""""""""""""""""""Insert mode""""""""""""""""""
" Prevent vim from moving cursor after returning to normal mode
imap <esc> <esc>l

" turn off arrow keys
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up>   <Nop>
inoremap <Down> <Nop>

" use jj and jk for escape, better alternative for macbook
inoremap jj <Esc>l
inoremap jk <Esc>l
" inoremap kj <Esc>l

"Autocenter file jumps
nmap G Gzz
nmap * *zz
nmap # #zz
nmap <C-o> <C-o>zz
nmap <C-i> <C-i>zz

inoremap " ""<left>
inoremap ' ''<left>
inoremap ` ``<left>
inoremap ( ()<left>
inoremap (<CR> (<CR>)<ESC>O
inoremap (;<CR> (<CR>);<ESC>O
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O
imap <C-s> <Esc> :w<CR> :echo "Saved" <CR> " Save file

" what does this do?
imap <C-@> <C-Space>

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""ex mode"""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""" Commands """""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""
command! MakeTags !ctags -R " generate tags in for the working directory

""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""" Plugins """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""
" Install the plugin manager if it doesn't exist
filetype off
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" -- Syntax, languages, & frameworks

Plug 'honza/vim-snippets'
Plug 'leafgarland/typescript-vim', { 'for': ['typescript', 'typescript.tsx'] }
Plug 'mxw/vim-jsx', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'pangloss/vim-javascript', { 'for': ['html', 'javascript', 'javascript.jsx']}
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-rake', { 'for': 'ruby' }
" Plug 'Valloric/YouCompleteMe'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'w0rp/ale'
Plug 'ternjs/tern_for_vim', { 'do': 'cd ~/.vim/plugged/tern_for_vim && npm install tern' }
Plug 'mattn/emmet-vim'
Plug 'ludovicchabant/vim-gutentags'

" -- Search & file nav

Plug 'scrooloose/nerdtree'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'

" -- Display

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
Plug 'lifepillar/vim-solarized8'

" -- version control

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'

" -- Misc Enhancements

Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

call plug#end()
""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""" Plugin-specific settings and mappings """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:solarized_termcolors=256                            " use solarized 256 fallback

let g:UltiSnipsSnippetsDir = "~/.vim/ultisnips"           " location for custom snippets
let g:UltiSnipsExpandTrigger = "<C-j>"                    " change trigger to work with YCM

" FZF
let $FZF_DEFAULT_COMMAND = 'ag -g "" --path-to-ignore ~/.ignore'                     " find command for fzf plugin
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>h :History<CR>
nnoremap <Leader>t :BTags<CR>
nnoremap <Leader>T :Tags<CR>
nnoremap <Leader>a :Ag<CR>
nnoremap <Leader>R :Rg<CR>

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

 function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

 let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

 " YCM
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

" CoC

" workspace patterns
autocmd FileType javascript let b:coc_root_patterns = ['package.json']
autocmd FileType typescript let b:coc_root_patterns = ['package.json']

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" User configuration object, so I can keep it in dotfiles
let g:coc_data_home = '~/.vim/.config/coc'

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" coc-snippets
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>cm  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" co-explorer
nnoremap <Leader>n :CocCommand explorer<CR>
""" END CoC"""


 " NERDTree
let NERDTreeShowHidden=1                                  " show hidden files in nerdtree
let NERDTreeQuitOnOpen = 1                                " quit nerdtree when opening a file
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" vim-jsx
let g:jsx_ext_required = 0

" javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,react,flux,chai,ramda,handlebars'

" Emmet
let g:user_emmet_leader_key='<C-e>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

let g:ale_linters = {
\  'javascript': ['prettier', 'eslint'],
\  'typescript': ['tsserver', 'prettier', 'eslint']
\}
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'eslint'],
\   'css': ['prettier'],
\   'scss': ['prettier']
\}
let g:ale_fix_on_save = 1
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
" let g:airline_left_sep=''
" let g:airline_right_sep=''
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_theme= 'minimalist'

"=== vim-fugitive
" show commits for every source line
nnoremap gb :Gblame<CR>
" Open current line in the browser
nnoremap <Leader>gb :.Gbrowse<CR>
" Open visual selection in the browser
vnoremap <Leader>gb :Gbrowse<CR>

"=== vim-gitgutter
" Update sign column every quarter second
set updatetime=250
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'
let g:gitgutter_override_sign_column_highlight = 1

let g:indentLine_char = '⎸'
" let g:indentLine_setConceal = 0
" let g:indentLine_conceallevel = 1

" highlight SignColumn guibg=bg
" highlight SignColumn ctermbg=bg

" jump between hunks
nmap <Leader>gn <Plug>GitGutterNextHunk  " git next
nmap <Leader>gp <Plug>GitGutterPrevHunk  " git previous

" Hunk-add and hunk-revert for chunk staging
nmap <Leader>ga <Plug>GitGutterStageHunk  " git add (chunk)
nmap <Leader>gu <Plug>GitGutterUndoHunk   " git undo (chunk)
"""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""" Misc """""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""
" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 80 characters.
  autocmd FileType text setlocal textwidth=80

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent                      " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif

