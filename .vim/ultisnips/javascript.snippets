snippet jt
import {
  describe,
  it,
  beforeEach,
  afterEach
} from 'mocha';
import { expect } from 'chai';
import sinon from 'sinon';

import ${1:myModule} from '../$1';

describe('$1', () => {
  beforeEach(() => {

  });

  afterEach(() => {

  });

  it('should be defined', () => {
    expect($1).to.not.be.undefined;
  })
});
endsnippet

snippet jjt
import ${1:myModule} from './$1';

describe('$1', () => {
  beforeEach(() => {

  });

  afterEach(() => {

  });

  it('should be defined', () => {
    expect($1).toBeDefined();
  })
});
endsnippet

snippet jct ""
import React from 'react';
import {
  describe,
  it,
  beforeEach,
  afterEach
} from 'mocha';
import { expect } from 'chai';
import { shallow } from 'enzyme';
import sinon from 'sinon';

import ${1:MyComponent} from '../$1';

describe('<$1/>', () => {
  beforeEach(() => {
    // setup each test here (or use before() for all)
  });

  afterEach(() => {
    // tear down each test here (or use after() for all)
  });

  it('shallow renders the component', () => {
    const wrapper = shallow(
      <$1 />
    );
    expect(wrapper.exists()).to.be.true;
  });
});
endsnippet

snippet jjct ""
import React from 'react';
import { shallow } from 'enzyme';

import ${1:MyComponent} from './$1';

describe('<$1/>', () => {
  beforeEach(() => {
    // setup each test here (or use before() for all)
  });

  afterEach(() => {
    // tear down each test here (or use after() for all)
  });

  it('renders the component', () => {
    const wrapper = shallow(
      <$1 />
    );
    expect(wrapper.exists()).toBe(true);
  });
});
endsnippet

snippet rfc ""
import React from 'react';
import PropTypes from 'prop-types';

function ${1:MyComponent}(props) {
  return (
    <div/>
  );
}

$1.propTypes = {};

$1.defaultProps = {};

export default $1;
endsnippet

snippet ess ""
const wrapper = shallow(
  <${1:MyComponent}/>
);
endsnippet

snippet ems ""
const wrapper = mount(
  <${1:MyComponent}/>
);
endsnippet

snippet rcc ""
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class ${1:MyComponent} extends Component {
  static get propTypes() {
    return {};
  }

  static get defaultProps() {
    return {};
  }

  render() {
    return (
      <div />
    );
  }
}

export default $1;
endsnippet

snippet rrfc ""
import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

function ${1:MyComponent}(props) {
  return <div />;
}

$1.propTypes = {};

$1.defaultProps = {};

function mapStateToProps(state) {
  return {};
}

function mapDispatchToProps(dispatch) {
  return {};
}

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet
